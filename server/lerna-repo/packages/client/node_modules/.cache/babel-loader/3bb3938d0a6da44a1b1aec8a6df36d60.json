{"ast":null,"code":"var _jsxFileName = \"d:\\\\test_lerna\\\\packages\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom'; // manage route\n\nimport indexRoutes from './routes/index.jsx';\nimport registerServiceWorker from './registerServiceWorker';\nimport './assets/css/bootstrap.min.css';\nimport './assets/sass/light-bootstrap-dashboard.css';\nimport './assets/css/demo.css';\nimport './assets/css/pe-icon-7-stroke.css';\nimport store from './redux/store';\nimport jwt_decode from 'jwt-decode';\nimport setAuthToken from 'admin-module/src/utils/setAuthToken';\nimport { setCurrentAccount, logoutAccountAdmin } from './redux/actions/auth.action';\nimport { Provider } from 'react-redux'; // Check for token:\n\nif (localStorage.jwtToken) {\n  // set auth token header auth:\n  setAuthToken(localStorage.jwtToken); // decode token and get data:\n\n  var decode = jwt_decode(localStorage.jwtToken); // set user and isAuthenticated\n\n  store.dispatch(setCurrentAccount(decode)); // check expire token:\n\n  var currentTime = Date.now() / 1000;\n\n  if (decode.exp < currentTime) {\n    store.dispatch(logoutAccountAdmin()); // redirect to login:\n\n    window.location.href = '/Pages/LoginPage';\n  }\n}\n\nReactDOM.render(React.createElement(Provider, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}, React.createElement(BrowserRouter, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}, React.createElement(Switch, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 48\n  },\n  __self: this\n}, indexRoutes.map(function (prop, key) {\n  return React.createElement(Route, {\n    extract: true,\n    path: prop.path,\n    component: prop.component,\n    key: key,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  });\n})))), document.getElementById('root'));\nregisterServiceWorker();","map":{"version":3,"sources":["d:\\test_lerna\\packages\\client\\src\\index.js"],"names":["React","ReactDOM","Route","BrowserRouter","Switch","indexRoutes","registerServiceWorker","store","jwt_decode","setAuthToken","setCurrentAccount","logoutAccountAdmin","Provider","localStorage","jwtToken","decode","dispatch","currentTime","Date","now","exp","window","location","href","render","map","prop","key","path","component","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SACIC,KADJ,EAEIC,aAFJ,EAGIC,MAHJ,QAIO,kBAJP,C,CAKA;;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AAEA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA,OAAO,gCAAP;AACA,OAAO,6CAAP;AACA,OAAO,uBAAP;AACA,OAAO,mCAAP;AAEA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,6BAAtD;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CAEA;;AACA,IAAGC,YAAY,CAACC,QAAhB,EAA0B;AACtB;AACAL,EAAAA,YAAY,CAACI,YAAY,CAACC,QAAd,CAAZ,CAFsB,CAGtB;;AACA,MAAMC,MAAM,GAAGP,UAAU,CAACK,YAAY,CAACC,QAAd,CAAzB,CAJsB,CAKtB;;AACAP,EAAAA,KAAK,CAACS,QAAN,CAAeN,iBAAiB,CAACK,MAAD,CAAhC,EANsB,CAQtB;;AACA,MAAME,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAW,IAA/B;;AACA,MAAGJ,MAAM,CAACK,GAAP,GAAaH,WAAhB,EAA4B;AACxBV,IAAAA,KAAK,CAACS,QAAN,CAAeL,kBAAkB,EAAjC,EADwB,CAEvB;;AACDU,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,kBAAvB;AACH;AACJ;;AAGDtB,QAAQ,CAACuB,MAAT,CACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAKjB,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEQF,WAAW,CAACoB,GAAZ,CAAgB,UAACC,IAAD,EAAMC,GAAN,EAAc;AAC1B,SACI,oBAAC,KAAD;AAAO,IAAA,OAAO,MAAd;AAAe,IAAA,IAAI,EAAED,IAAI,CAACE,IAA1B;AAAgC,IAAA,SAAS,EAAEF,IAAI,CAACG,SAAhD;AAA4D,IAAA,GAAG,EAAEF,GAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAGH,CAJD,CAFR,CAFJ,CADJ,CADJ,EAeGG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAfH;AAgBAzB,qBAAqB","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n    Route,\r\n    BrowserRouter,\r\n    Switch\r\n} from 'react-router-dom';\r\n// manage route\r\nimport indexRoutes from './routes/index.jsx';\r\n\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nimport './assets/css/bootstrap.min.css';\r\nimport './assets/sass/light-bootstrap-dashboard.css';\r\nimport './assets/css/demo.css';\r\nimport './assets/css/pe-icon-7-stroke.css';\r\n\r\nimport store from './redux/store';\r\n\r\nimport jwt_decode from 'jwt-decode';\r\nimport setAuthToken from 'admin-module/src/utils/setAuthToken';\r\nimport { setCurrentAccount, logoutAccountAdmin } from './redux/actions/auth.action';\r\nimport { Provider } from 'react-redux';\r\n\r\n// Check for token:\r\nif(localStorage.jwtToken) {\r\n    // set auth token header auth:\r\n    setAuthToken(localStorage.jwtToken);\r\n    // decode token and get data:\r\n    const decode = jwt_decode(localStorage.jwtToken);\r\n    // set user and isAuthenticated\r\n    store.dispatch(setCurrentAccount(decode));\r\n\r\n    // check expire token:\r\n    const currentTime = Date.now()/1000;\r\n    if(decode.exp < currentTime){\r\n        store.dispatch(logoutAccountAdmin());\r\n         // redirect to login:\r\n        window.location.href = '/Pages/LoginPage';\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render((\r\n    <Provider store = { store } >        \r\n        <BrowserRouter>\r\n            {/* just render 1 component at same time */}\r\n            <Switch>\r\n                {\r\n                    indexRoutes.map((prop,key) => {\r\n                        return (\r\n                            <Route extract path={prop.path} component={prop.component}  key={key}/>\r\n                        );\r\n                    })\r\n                }\r\n            </Switch>\r\n        </BrowserRouter>\r\n    </Provider>\r\n), document.getElementById('root'));\r\nregisterServiceWorker();\r\n"]},"metadata":{},"sourceType":"module"}