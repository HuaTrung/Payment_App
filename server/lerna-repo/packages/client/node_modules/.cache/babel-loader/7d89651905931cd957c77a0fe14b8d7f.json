{"ast":null,"code":"import axios from 'axios';\nimport { SET_CURRENT_ACCOUNT, GET_LOGIN_ERRORS } from './types';\nimport setAuthToken from 'admin-module/src/utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nvar loginAccountAdmin = function loginAccountAdmin(accountAdmin) {\n  return function (dispatch) {\n    console.log(accountAdmin); // fetch('http://localhost:5000/secure/login',{\n    //     method: 'POST',\n    //     body: accountAdmin,\n    //     mode: 'cors'\n    // })\n    // .then( (response) => {\n    //     if(response.ok){\n    //         return response.json();\n    //     }else{\n    //         throw new Error('BAD HTTP stuff');\n    //     }\n    // })\n    // .then( res => {\n    //     console.log(res);\n    //     // save data to local storage\n    //     const { token } = res.data;\n    //     localStorage.setItem('jwtToken',token);\n    //     // set token to auth header:\n    //     setAuthToken(token);\n    //     // use jwt-decode to decode token to get id, name, image\n    //     const decoded = jwt_decode(token);\n    //     // set current account:\n    //     dispatch(setCurrentAccount(decoded));\n    // })\n    // .catch(err=>{ // status 404 || 400\n    //     dispatch({ // submit action => to reducer\n    //         type: GET_LOGIN_ERRORS,\n    //         payload: err.response.data\n    //     });\n    // });\n\n    axios.post(\"http://localhost:5000/secure/account/login\", accountAdmin).then(function (res) {\n      console.log(res); // save data to local storage\n\n      var token = res.data.token;\n      localStorage.setItem('jwtToken', token); // set token to auth header:\n\n      setAuthToken(token); // use jwt-decode to decode token to get id, name, image\n\n      var decoded = jwt_decode(token); // set current account:\n\n      dispatch(setCurrentAccount(decoded));\n    }).catch(function (err) {\n      // status 404 || 400\n      dispatch({\n        // submit action => to reducer\n        type: GET_LOGIN_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\n\nvar logoutAccountAdmin = function logoutAccountAdmin() {\n  return function (dispatch) {\n    // remove token from local storage\n    localStorage.removeItem('jwtToken'); // remove auth header for future request\n\n    setAuthToken(false); //set account to empty\n\n    dispatch(setCurrentAccount({}));\n  };\n}; // set loggin account\n\n\nvar setCurrentAccount = function setCurrentAccount(decoded) {\n  return {\n    type: SET_CURRENT_ACCOUNT,\n    payload: decoded\n  };\n};\n\nexport { setCurrentAccount, loginAccountAdmin, logoutAccountAdmin };","map":{"version":3,"sources":["d:\\test_lerna\\packages\\client\\src\\redux\\actions\\auth.action.js"],"names":["axios","SET_CURRENT_ACCOUNT","GET_LOGIN_ERRORS","setAuthToken","jwt_decode","loginAccountAdmin","accountAdmin","dispatch","console","log","post","then","res","token","data","localStorage","setItem","decoded","setCurrentAccount","catch","err","type","payload","response","logoutAccountAdmin","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA+BC,gBAA/B,QAAwD,SAAxD;AACA,OAAOC,YAAP,MAA0B,qCAA1B;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,YAAY;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAElDC,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ,EAFkD,CAKlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAN,IAAAA,KAAK,CAACU,IAAN,CAAW,4CAAX,EAAwDJ,YAAxD,EACKK,IADL,CACW,UAAAC,GAAG,EAAI;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ,EADU,CAEV;;AAFU,UAGFC,KAHE,GAGQD,GAAG,CAACE,IAHZ,CAGFD,KAHE;AAIVE,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAgCH,KAAhC,EAJU,CAKV;;AACAV,MAAAA,YAAY,CAACU,KAAD,CAAZ,CANU,CAOV;;AACA,UAAMI,OAAO,GAAGb,UAAU,CAACS,KAAD,CAA1B,CARU,CASV;;AACAN,MAAAA,QAAQ,CAACW,iBAAiB,CAACD,OAAD,CAAlB,CAAR;AACH,KAZL,EAaKE,KAbL,CAaW,UAAAC,GAAG,EAAE;AAAE;AACVb,MAAAA,QAAQ,CAAC;AAAE;AACPc,QAAAA,IAAI,EAAEnB,gBADD;AAELoB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFjB,OAAD,CAAR;AAIH,KAlBL;AAmBH,GAxDqC;AAAA,CAAtC;;AA0DA,IAAMU,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAM,UAAAjB,QAAQ,EAAI;AACzC;AACAQ,IAAAA,YAAY,CAACU,UAAb,CAAwB,UAAxB,EAFyC,CAGzC;;AACAtB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJyC,CAKzC;;AACAI,IAAAA,QAAQ,CAACW,iBAAiB,CAAC,EAAD,CAAlB,CAAR;AACH,GAP0B;AAAA,CAA3B,C,CASA;;;AACA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAD,OAAO,EAAI;AACjC,SAAO;AACHI,IAAAA,IAAI,EAAEpB,mBADH;AAEHqB,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAIH,CALD;;AAOA,SAASC,iBAAT,EAA4Bb,iBAA5B,EAA+CmB,kBAA/C","sourcesContent":["import axios from 'axios';\r\nimport { SET_CURRENT_ACCOUNT , GET_LOGIN_ERRORS }  from './types'\r\nimport setAuthToken  from 'admin-module/src/utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\nconst loginAccountAdmin = accountAdmin => dispatch => {\r\n    \r\n    console.log(accountAdmin);\r\n\r\n\r\n    // fetch('http://localhost:5000/secure/login',{\r\n    //     method: 'POST',\r\n    //     body: accountAdmin,\r\n    //     mode: 'cors'\r\n    // })\r\n    // .then( (response) => {\r\n    //     if(response.ok){\r\n    //         return response.json();\r\n    //     }else{\r\n    //         throw new Error('BAD HTTP stuff');\r\n    //     }\r\n    // })\r\n    // .then( res => {\r\n    //     console.log(res);\r\n    //     // save data to local storage\r\n    //     const { token } = res.data;\r\n    //     localStorage.setItem('jwtToken',token);\r\n    //     // set token to auth header:\r\n    //     setAuthToken(token);\r\n    //     // use jwt-decode to decode token to get id, name, image\r\n    //     const decoded = jwt_decode(token);\r\n    //     // set current account:\r\n    //     dispatch(setCurrentAccount(decoded));\r\n    // })\r\n    // .catch(err=>{ // status 404 || 400\r\n    //     dispatch({ // submit action => to reducer\r\n    //         type: GET_LOGIN_ERRORS,\r\n    //         payload: err.response.data\r\n    //     });\r\n    // });\r\n\r\n\r\n    axios.post(\"http://localhost:5000/secure/account/login\",accountAdmin)\r\n        .then( res => {\r\n            console.log(res);\r\n            // save data to local storage\r\n            const { token } = res.data;\r\n            localStorage.setItem('jwtToken',token);\r\n            // set token to auth header:\r\n            setAuthToken(token);\r\n            // use jwt-decode to decode token to get id, name, image\r\n            const decoded = jwt_decode(token);\r\n            // set current account:\r\n            dispatch(setCurrentAccount(decoded));\r\n        })\r\n        .catch(err=>{ // status 404 || 400\r\n            dispatch({ // submit action => to reducer\r\n                type: GET_LOGIN_ERRORS,\r\n                payload: err.response.data\r\n            });\r\n        });\r\n}\r\n\r\nconst logoutAccountAdmin = () => dispatch => {\r\n    // remove token from local storage\r\n    localStorage.removeItem('jwtToken');\r\n    // remove auth header for future request\r\n    setAuthToken(false);\r\n    //set account to empty\r\n    dispatch(setCurrentAccount({}));\r\n}\r\n\r\n// set loggin account\r\nconst setCurrentAccount = decoded => {\r\n    return {\r\n        type: SET_CURRENT_ACCOUNT,\r\n        payload: decoded \r\n    }\r\n}\r\n\r\nexport { setCurrentAccount, loginAccountAdmin, logoutAccountAdmin };"]},"metadata":{},"sourceType":"module"}